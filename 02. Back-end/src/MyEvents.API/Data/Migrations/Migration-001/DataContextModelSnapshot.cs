// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyEvents.API.Data.Context;

namespace MyEvents.API.Data.Migrations.Migration001
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.17");

            modelBuilder.Entity("MyEvents.API.Domain.Entity.Model.Batch", b =>
                {
                    b.Property<uint>("IdBatch")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<uint?>("EventIdEvent")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("IdEvent")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<uint>("TheAmount")
                        .HasColumnType("INTEGER");

                    b.HasKey("IdBatch");

                    b.HasIndex("EventIdEvent");

                    b.ToTable("Batch");
                });

            modelBuilder.Entity("MyEvents.API.Domain.Entity.Model.Event", b =>
                {
                    b.Property<uint>("IdEvent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EventDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Local")
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfParticipants")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Telephone")
                        .HasColumnType("TEXT");

                    b.Property<string>("Theme")
                        .HasColumnType("TEXT");

                    b.HasKey("IdEvent");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("MyEvents.API.Domain.Entity.Model.SocialNetwork", b =>
                {
                    b.Property<uint>("IdSocialNetwork")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("EventIdEvent")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("IdEvent")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("IdSpeaker")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<uint?>("SpeakerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("IdSocialNetwork");

                    b.HasIndex("EventIdEvent");

                    b.HasIndex("SpeakerId");

                    b.ToTable("SocialNetwork");
                });

            modelBuilder.Entity("MyEvents.API.Domain.Entity.Model.Speaker", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Summary")
                        .HasColumnType("TEXT");

                    b.Property<string>("Telephone")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Speaker");
                });

            modelBuilder.Entity("MyEvents.API.Domain.Entity.Model.SpeakerEvent", b =>
                {
                    b.Property<uint>("IdEvent")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("IdSpeaker")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("SpeakerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("IdEvent", "IdSpeaker");

                    b.HasIndex("SpeakerId");

                    b.ToTable("SpeakerEvent");
                });

            modelBuilder.Entity("MyEvents.API.Domain.Entity.Model.Batch", b =>
                {
                    b.HasOne("MyEvents.API.Domain.Entity.Model.Event", "Event")
                        .WithMany("Batch")
                        .HasForeignKey("EventIdEvent");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("MyEvents.API.Domain.Entity.Model.SocialNetwork", b =>
                {
                    b.HasOne("MyEvents.API.Domain.Entity.Model.Event", "Event")
                        .WithMany("SocialNetwork")
                        .HasForeignKey("EventIdEvent");

                    b.HasOne("MyEvents.API.Domain.Entity.Model.Speaker", "Speaker")
                        .WithMany("SocialNetwork")
                        .HasForeignKey("SpeakerId");

                    b.Navigation("Event");

                    b.Navigation("Speaker");
                });

            modelBuilder.Entity("MyEvents.API.Domain.Entity.Model.SpeakerEvent", b =>
                {
                    b.HasOne("MyEvents.API.Domain.Entity.Model.Event", "Event")
                        .WithMany("SpeakerEvent")
                        .HasForeignKey("IdEvent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyEvents.API.Domain.Entity.Model.Speaker", "Speaker")
                        .WithMany("SpeakerEvent")
                        .HasForeignKey("SpeakerId");

                    b.Navigation("Event");

                    b.Navigation("Speaker");
                });

            modelBuilder.Entity("MyEvents.API.Domain.Entity.Model.Event", b =>
                {
                    b.Navigation("Batch");

                    b.Navigation("SocialNetwork");

                    b.Navigation("SpeakerEvent");
                });

            modelBuilder.Entity("MyEvents.API.Domain.Entity.Model.Speaker", b =>
                {
                    b.Navigation("SocialNetwork");

                    b.Navigation("SpeakerEvent");
                });
#pragma warning restore 612, 618
        }
    }
}
